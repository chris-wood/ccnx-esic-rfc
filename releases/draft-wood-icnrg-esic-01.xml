<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-wood-icnrg-esic-01" category="info">

  <front>
    <title abbrev="CCNx-ESIC">Encrypted Sessions In CCNx (ESIC)</title>

    <author initials="M." surname="Mosko" fullname="Marc Mosko">
      <organization>PARC, Inc.</organization>
      <address>
        <email>marc.mosko@parc.com</email>
      </address>
    </author>
    <author initials="C.A." surname="Wood" fullname="Christopher A. Wood">
      <organization>University of California Irvine</organization>
      <address>
        <email>woodc1@uci.edu</email>
      </address>
    </author>

    <date year="2015" month="March" day="06"/>

    <area>General</area>
    <workgroup>ICNRG Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes how to transport CCNx packets inside an
encrypted session between peers that share a traffic secret, such
as that which is derived from <xref target="CCNxKE"/>. The peers create an outer naming
context to identify the encryption session in one direction
between the consumer and the producer. The consumer sends encrypted
Interest messages to the producer, who responds with encrypted Content Objects.
Inside the outer context, the consumer sends Interests with different
names, which the producer may respond to or may send InterestReturns for.
There does not need to be a naming relationship between the outer names
and the inner names.  The inner content is still protected by normal
CCNx authentication mechanisms and possiby encrypted under other schemes.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>CCNx packets <xref target="MESSAGES"/> contain a fixed header, optional hop-by-hop headers,
a CCNx Message, and a validation section.  Encrypted Sessions in CCNx (ESIC)
describes how to to transport encrypted CCNx packets inside other CCNx packets.
The outer packet (the wrapper) uses a CCNx name that identifies the encrypted
session while the inner (encrypted) portion remains hidden and private to
an outside observer.</t>

<t>ESIC defines a new field Encapsulated (T_ENCAP) that may occur in both an Interest (T_INTEREST)
and Content Object (T_OBJECT).  The T_ENCAP field contains the encryption of the
inner CCNx Packet.</t>

<t>Because the use of an outer CCNxPacket, the total packet length of the inner
CCNxPacket may need to be limited to less than the maximum of 64 KB.  ESIC allows the
use of a compressor before the encryptor, so it is likely that a packet that would
overflow the 64 KB limit could be compressed by enough to allow for an outer CCNxPacket.
This consideration for the PacketLength is separate from concerns about path MTU.</t>

<t>It is a requirement of ESIC that one inner packet fit in one outer packet.  This is
because ESIC does not define a method to issue extra outer interests to fetch extra
outer content objects.  It relies entirely on Interests generated by the consumer application.</t>

<t>ESIC defines a control channel within the outer context by using special names
with the inner packets.  These names allow signaling between the two encryption endpoints
for features such as alerts and rekeying requests.</t>

<t>ESIC defines how to use a traffic secret (TS), such as derived from CCNxKE, to encrypt
multiple packets in a consumer-producer session.  Each direction will use separate
derived keys.  If one wishes to have a reverse traffic flow (interests from producer fetching
content objects from the consumer), then one must share a second TS and use it with
the roles reversed, but otherwise it works exactly as in the first case.</t>

<t>The mechanism by which this symmetric key is obtained is outside the scope of
this document; These keys could be pre-shared or derived from an online key-exchange
protocol <xref target="CCNxKE"/>.</t>

<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in RFC 2119 <xref target="RFC2119"/>.</t>

<t>The following terms are used:</t>

<t><list style="symbols">
  <t>Inner Packet: A fully-formed CCNx packet (fixed header through validation) that is
carried encrypted inside a T_ENCAP TLV.</t>
  <t>Outer Packet: A fully-formed CCNx packet that carries the outer context of an encrypted session.</t>
  <t>Outer Name: The name of the outer packet.</t>
  <t>Inner Name: The name of the inner packet (not visible in transport).</t>
  <t>Control channel: the use of Inner Packets to convey control signaling between encryption endpoints
using a special Inner Name.</t>
</list></t>

</section>
</section>
<section anchor="stateless-packet-keys" title="Stateless packet keys">

<t>ESIC assumes that the consumer and producer share a Traffic Secret (TS), usually derived
as per CCNxKE.  Regardless of  how the TS is derived (TODO: it needs to meet some so-far
unstated requirements), there are four secrets
derived from the TS, as per CCNxKE Section 9.5.  This
specifies how to generate the Client Write Key, Server Write Key, Client Write IV, and
Server Write IV.</t>

<t>The AEAD nonce (IV) is derived as specified in <xref target="TLS13"/>. In particular, the length of
the IV for each AEAD operation is set to max(8 bytes, N_MAX), where N_MIN must be
at least 8 bytes <xref target="RFC5116"/>. With this length, the nonce is initialized by:</t>

<t><list style="numbers">
  <t>Padding the 64-bit per-packet AEAD sequence number to the left with zeroes so that
its length is equal to the IV length.</t>
  <t>This padded sequence number is then XORed with the consumer or producer IV, depending
on the role.</t>
</list></t>

<!-- for AES-GCM, the counter starts at zero and nonces are not re-used -->

<t>TODO: Should we allow CCNxKE to specify the starting chunk number so it does not
always start at 0? It would need to be encoded in the MoveToken.</t>

</section>
<section anchor="inner-and-outer-contexts" title="Inner and Outer Contexts">

<t>The inner context is a CCNx packet with meaning to the consumer and producer.  They may be
clear text or they make use additional encryption, such as group keying, broadcast encryption,
homomorphic encryption, or something else.  The consumer sends an Interest packet with an Inner Name
(plus other optional fields as normal) and expectes to get back a Content Object or InterestReturn
packet with corresponding name and fields.</t>

<t>The outer context names the encryption session and sequences packets.  ESIC does not expect
a one-to-one correspondence of outer name and inner name.  If a consumer, for example, sends
3 interests with outer names NO1, NO2, NO3 and inner names NI1, NI2, and NI3, the producer
can return those names in any order.  It could put content objects with name NI3 in NO1,
NI1 in NO2, and NI2 in NO3.  ESIC does expect normal CCNx processing rules to be followed for
the inner packets, therefore we would expect at most one inner packet returned for each
inner Interest.  That inner packet could be either a Content Object or Interest Return.</t>

<section anchor="outer-context-names" title="Outer Context Names">

<t>The outer context name is a routable prefix PREFIX followed by a session ID (SID) followed
by a ChunkNumber (Chunk).  The chunk number is a monotonically increasing number.  The outer name
is clear text, visible to all observers.</t>

<t>The PREFIX and SID are derived outside of ESIC.  In normal use with CCNxKE, the PREFIX is either the same
prefix as used in the key exchagne or it is derived from within CCNxKE from Prefix2 or the MoveToken.
The SID is created by the producer and given to the consumer inside CCNxKE.</t>

<figure><artwork><![CDATA[
OuterName := ccnx:/PREFIX/SID=sid/CHUNK=chunk
]]></artwork></figure>

<t>Chunk numbers are limited to 8 bytes and do not wrap around.  When the consumer gets near the
end of the sequence number space, it must request a re-keying via the control channel.  Because CCNx in
a pull-driven model, the consumer is reponsible for the chunk number and thus responsible for requesting
the re-keying.  The producer may also request a re-keying for its own reasons.</t>

</section>
<section anchor="outer-packet" title="Outer Packet">

<t>The outer packet will have a Fixed Header, per hop headers, a CCNx Message with the Outer Name,
and a Validation section (ValidationAlg and ValidationPayload).
The outer packet is visible to 3rd parties in its entirety.  Only the ‘value’ of
T_ENCAP TLV field inside the CCNx Message is encrypted.
The T_ENCAP TLV Value is the AEAD ‘plaintext’ that will be converted to the ‘ciphertext’.
In the outer packet, only the CCNx Message and the ValidationAlg are covered by the authentication token</t>

<t>The Outer Packet has a Validation section.  The ValidationAlg will have a 0-length ValidationType of
T_SESSION, which indidates that the encryption context must be derived from the SID in the
name.</t>

<t>The Associated Data (in AEAD) covered by the validation output is from the beignning of the CCNx Message
up to but not including the T_ENCAP Value concatendated with the ValidationAlg TLV.  That is, it skips the
T_ENCAP TLV Value.</t>

<t>The ValidationPayload contains the AEAD authentication token.</t>

<t>If the Producer cannot satisfy an Inner Packet Interest, it will encapsualte an InterestReturn inside
an OuterPacket of PacketType ContentObject.  That is, the InterestReturn is end-to-end signaling about the
inner context.</t>

<t>If the Producer has an error with the Outer Context, it may return an InterestReturn for the outer context
as normal for Interest processing.</t>

<section anchor="consumer-outer-packet" title="Consumer Outer Packet">

<t>The outer packet from the consumer to the producer will always be of PacketType Interest.
They may have any of the normal Interest per-hop headers (e.g. InterestLifetime), which will be
visible to 3rd parties and not protected by the encryption or authentication.</t>

<t>The Outer Context has a T_INTEREST message type, which contains a T_NAME of the Outer Name.
It may have other additional metadata in clear text.  The T_INTEREST container is protected by
the encryption authenticator.  Finally, the T_INTEREST has a T_ENCAP field that contains
the encryption of the Inner Packet.  The encryption will use the algorithm negotiated as
part of the SID (i.e. AES-GCM).</t>

</section>
<section anchor="producer-outer-packet" title="Producer Outer Packet">

<t>The producer will only send PacketType ContentObject back to the consumer.  The Inner packet
may be either an InterestReturn or a ContentObject corresponding to the Inner Packet interest.</t>

<t>The outer packet may have per-hop headers (e.g. RecommendedCacheTime) that affect the encrypted
packet.  These are independent from the inner Per Hop headers.  The outer MessageType is
always T_OBJECT.  It may have normal metadata for a content object, such as ExpiryTime, which affect
only the outer packet.  Finally, it has a T_ENCAP that contains the wrapped inner Packet.</t>

</section>
</section>
<section anchor="processing-chain" title="Processing Chain">

<t>The processing chain from the Source to the Sink is shown below.  The
compression/decompression stages are optional and are not strongly tied
to the encrypted session.  If used, we assume the compression protocol is
session specific to avoid state snooping (e.g. such as in CRIME attack).</t>

<figure><artwork><![CDATA[
() indicates output of stage
+------------+   +-------------+   +-----------------+   +---------+
| Source     | - | Compresser  | - | Encypter/Framer | - | Channel |
|(CCNxPacket)|   |(CCNxzPacket)|   | (CCNxPacket)    |   |         |
+------------+   +-------------+   +-----------------+   +---------+

+------------+   +--------------------+   +-------------+   +------+
| Channel    | - | Deframer/Decrypter | - | Decompressor| - | Sink |
|(CCNxPacket)|   | (CCNxzPacket)      |   | (CCNxPacket)|   |      |
+------------+   +--------------------+   +-------------+   +------+
]]></artwork></figure>

<t><list style="symbols">
  <t>Source: The source of an Inner Packet.</t>
  <t>Compressor: Optional component to reduce the size before encryption.</t>
  <t>Encrypter/Framer: Creates the ciphertext of the CCNx(z)packet to produce
 the T_ENCAP, constructs the outer packet, computes the authentication token
 and generates the ValidationPayload.</t>
  <t>Channel: Carries the wireformat outer packet</t>
  <t>Deframer/Decrypter: Verifies the authenticator, decrypts the T_ENCAP, and
 passes the Inner Packet to the Decompressor.</t>
  <t>Decompressor: Optional component to expand the inner packet</t>
  <t>Sink: The sink of an Inner Packet.</t>
</list></t>

<t>The Encrypter/Framer will generate outer names with sequential outer name
chunk numbers.</t>

<t>The Deframer/Decryptor will extract the SID and chunk number from the outer name
and use those to create the packet key (see below).  Using the packet key,
it will verify the authentication token and if successful decrypt the T_ENCAP.
The output of the T_ENCAP will then be passed to the Sink.</t>

</section>
<section anchor="transport-state-machine" title="Transport State Machine">

<t>ESIC uses a state machine to manage the ephemeral session such that the
Producer knows when the Consumer is finished with the SID.  It also will
try to re-request packets that fail authentication before sending its
own InterestReturn up the Sink.</t>

<t>The protocol begins with each side knowing the four keys (see Stateless Packet Keys below),
the Session ID (SID), and the routable prefix PREFIX.</t>

<t>The receiving process uses a replay buffer to prevent replay attacks.  The buffer
tracks the last N out-of-order verified chunks plus the cumulative verified chunk number.
TODO: Sort this out how to avoid replay attacks without requiring reliable in-order delivery.</t>

<t>Protocol of Encrypter/Framer:</t>

<t><list style="symbols">
  <t>Initialize: set NextChunkNumber = 0, State = Waiting</t>
  <t>Waiting: Wait for packet from Source (or compressor).  On packet receive, State = Send</t>
  <t>Send:
  <list style="symbols">
      <t>Generate packet key for NextChunkNumber</t>
      <t>Create outer packet with name /PREFIX/SID=sid/CHUNK=NextChunkNumber and the
input packet as cleartext in the T_ENCAP.</t>
      <t>Run the AEAD scheme authenticating and encrypting.  Note the prior description of
the split Associated Data before and after the plaintext.</t>
      <t>Increment NextChunkNumber</t>
      <t>Send the packet</t>
      <t>State = Waiting</t>
    </list></t>
</list></t>

<t>Protocol of the Deframer/Decrypter:</t>

<t><list style="symbols">
  <t>Initialize the replay buffer to empty, State = Waiting.</t>
  <t>Waiting: wait for packet, on input from channel State = Receive</t>
  <t>Receive:
  <list style="symbols">
      <t>Extract the SID and ChunkNumber from name</t>
      <t>If replay, drop</t>
      <t>Authenticate the packet
      <list style="symbols">
          <t>If failed on consumer, send InterestReturn to Source with “X Error” (TBD)</t>
          <t>If failed on producer, send failure message to Sink so it can send end-to-end InterestReturn
back over channel (if desired) with “Y Error” (TBD)</t>
        </list></t>
      <t>Add packet to replay buffer</t>
      <t>Decrypt packet</t>
      <t>Pass decrypted packet to Sink/Source (or decompressor)</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="control-channel" title="Control Channel">

<t>The consumer and producer will need to exchange signaling about the encryption context.
Control and data traffic should be indistinguishable to
an external observer.  Therefore, all control signaling is done within the same
outer names as data traffic.</t>

<t>Control signaling is done with a normal Inner Packet that pushes data to the other side.
We use an Interest with an Inner Name of the form shown below,
where ‘<spanx style="emph">direction</spanx>’ is ‘up’ from the consumer to producer or ‘down’ for the producer to consumer.
This allows each side to maintain its own sequence number space in the ‘seqnum’.  This is similar
to the use of the sequence number in the DTLS record layer.</t>

<t>Like DTLS, ESIC control messages are unreliable, though they are uniquely named.</t>

<t>The payload of the control Interest uses a TLV equivalent of the TLS record format
for handshake and alert messages.  Application data is never communicated in these
records, as they use an Inner Packet with a different Inner Name.
Inside the payload, a TLV type of Alert (21) or Handshake (22) indicates the purpose of
the TLV value.  One may concatenate multiple records in to one payload.</t>

<figure><artwork><![CDATA[
ControlName := ccnx:/localhost/esic/_direction_/SID=sid/SEQNUM=seqnum
]]></artwork></figure>

<section anchor="esic-control-packets" title="ESIC Control Packets">

<t>A control packet is a CCNx Interest Inner Packet.  The name of the control packet is
as above in the /localhost/esic namesapce.  The Payload of the Interest is the actual data.</t>

<t>The ESIC control packet SHOULD be padded out to a length that is indistinguishable
from other traffic in the given <spanx style="emph">direction</spanx>.</t>

<t>The Payload of the Interest contains a set of TLV records using the normal CCNx TLV encoding.
The TLV types and values are defined in the next section.</t>

<t>In the ‘up’ direction from the consumer to the producer, a control packet can be inserted
into the Interest stream as normal.  The producer may use this extra outer name to return
its own control message or send a “no-op” back to consume the extra name.</t>

<t>In the ‘down’ direction from the producer to the consumer, there is no pre-allocated
outer name available.  The producer can only send the consumer a control message if the
consumer has outstanding Interests up to the producer.  If there is one or more oustanding
interests in the outer name space, the producer normally would send a Content Object or Interest Return
corresponding to some inner name.  In this case, the producer would instead inject a control
packet Interest in the downstream.  This means the producer is now short one outer Interest in the
upstream direction.  Therefore, whenever the Deframer/Decrypter sees a control message
in the downstream direction, it MUST insert an upstream “no-op” packet, padded out to
statistically undetectable length, to give the producer back a missing name slot.</t>

<t>We allow one ESIC control packet in one outer packet.  However, we allow multiple
Alert messages to be encoded in the payload, so long as it remains indistinguishable
from other packets in the given <spanx style="emph">direction</spanx>.</t>

<t>Example from a consumer to a producer, where “NO” means “name outer” and “NI” means “name inner”.</t>

<figure><artwork><![CDATA[
Consumer                                   Producer
   | >------- NO1 : NI1 (Interest) -------->   |
   | >------- NO2 : NI2 (Interest) -------->   |
   | <------- NO1 : NI1 (ContentObject) ---<   |
   | >------- NO3 : NI /local/esic/up/2/1 ->   |
   | <------- NO3 : no-op -----------------<   | (no-op)
   | <------- NO2 : NI2 (ContentObject) ---<   |
]]></artwork></figure>

<t>Here is an example from a producer to a consumer.  The producer uses the
second avaialble name NO2 to send a control message to the consumer.  The
consumer must then send a no-op packet back up to the producer so it
can return the final data packet NI2 inside NO3.</t>

<figure><artwork><![CDATA[
Consumer                                   Producer
| >------- NO1 : NI1 (Interest) -------->   |
| >------- NO2 : NI2 (Interest) -------->   |
| <------- NO1 : NI1 (ContentObject) ---<   |
| <------- NO2 : NI /local/esic/dn/2/1 -<   |
| >------- NO3 : ----------------------->   | (no-op)
| <------- NO3 : NI2 (ContentObject) ---<   |
]]></artwork></figure>

<t>TODO: Add examples with loss</t>

</section>
<section anchor="esic-control-messages" title="ESIC Control Messages">

<t>ESIC adopts the TLS 1.3 Alert Protocol for its control messages.  The TLV type of the message
inside the control packet payload is taken from the enum AlertDescription.  As per TLS 1.3,
fatal Alert messages are an immediate close of the ESIC session.</t>

<t>As per TLS 1.3, each party MUST send a close_nofity message closing the write side of
the connection.  In ESIC, this means that when a consumer is done requesting data, it should
send a final close_notify.  The producer should then use this outer name to send back its
own close_notify.  If for some reason the producer must close before the consumer, it should
inject its own close_notify discarding all remaining data and the consumer should send
back upstream a close_notify.</t>

<t>The KeyUpdate messages function as per TLS 1.3 Sec 6.3.5.3.  Either side may generate a KeyUpdate
message and begin transmitting with the new key.  The other side must update their own key
and issue its own KeyUpdate message.</t>

</section>
</section>
<section anchor="the-esic-api" title="The ESIC API">

<t>In this section we describe the ESIC API. Before doing so, we highlight some details that
molded the API for both consumers and consumers.</t>

<t><list style="symbols">
  <t>Encrypted sessions are bound to names instead of addresses. Consequently, in addition to 
a set of trusted keys, sessions between a consumer and producer require only a name to be created.</t>
  <t>Sessions are created by an active consumer with a passive peer (producer). Thus, the API must
reflect these roles.</t>
  <t>Consumers send and receive whole CCNx messages over a session. Thus, simple read and write
functions must be exposed via the API.</t>
  <t>Sessions are not full duplex by default. A producer must specify in its ServerConfiguration construct
that it wishes to send interests to the consumer. To maintain transparency, the modality of the resulting 
session is not reflected in the API.</t>
</list></t>

<t>These observations are distilled in the following ESIC API.</t>

<figure><artwork><![CDATA[
# @Consumer: create a secure session with a producer
CCNxSecureSession *ccnxSecureSession_Connect(CCNxPortal *portal, 
    PARCIdentity *identity, CCNxName *servicePrefix);

# @Producer: create a passive listener
CCNxSecureSession *ccnxSecureSession_CreateServer(CCNxPortal *portal, 
    CCNxKeyExchangeConfig *config, CCNxName *servicePrefix);

# @Producer: accept uni- and bi-directional sessions
CCNxSecureSession *ccnxSecureSession_AcceptConnection(CCNxSecureSession *session);
CCNxSecureSession *ccnxSecureSession_AcceptBidirectionalConnection(CCNxSecureSession *session);

# Send a CCNx message
# Override the outer name with the `response` parameter if needed
void ccnxSecureSession_SendMessage(CCNxSecureSession *session, 
    CCNxTlvDictionary *message, const CCNxStackTimeout *timeout, CCNxName *response);

# Receive and decapsulate a CCNx message
# Store the outer name in the `response` parameter.
CCNxMetaMessage *ccnxSecureSession_ReceiveMessage(CCNxSecureSession *session, 
    const CCNxStackTimeout *timeout, CCNxName **response);
]]></artwork></figure>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>It may be possible for an observer to identify which outer packets contain a control (alert) message
if the ACK response time shows significant statistical timing different from the normal
flow of messages.</t>

<t>TODO.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC5116" target='https://www.rfc-editor.org/info/rfc5116'>
<front>
<title>An Interface and Algorithms for Authenticated Encryption</title>
<author initials='D.' surname='McGrew' fullname='D. McGrew'><organization /></author>
<date year='2008' month='January' />
<abstract><t>This document defines algorithms for Authenticated Encryption with Associated Data (AEAD), and defines a uniform interface and a registry for such algorithms.  The interface and registry can be used as an application-independent set of cryptoalgorithm suites.  This approach provides advantages in efficiency and security, and promotes the reuse of crypto implementations.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5116'/>
<seriesInfo name='DOI' value='10.17487/RFC5116'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>


<reference anchor="TLS13" target="https://tools.ietf.org/html/draft-ietf-tls-tls13-13">
  <front>
    <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
    <author initials="." surname="RTFM, Inc" fullname="E. Rescorla">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="CCNxKE" target="https://github.com/parc/ccnx-keyexchange-rfc">
  <front>
    <title>CCNx Key Exchange Protocol Version 1.0</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="MESSAGES" target="https://tools.ietf.org/html/draft-irtf-icnrg-ccnxmessages-02">
  <front>
    <title>CCNx Messages in TLV Format</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>

    <references title='Informative References'>





<reference  anchor="RFC5389" target='https://www.rfc-editor.org/info/rfc5389'>
<front>
<title>Session Traversal Utilities for NAT (STUN)</title>
<author initials='J.' surname='Rosenberg' fullname='J. Rosenberg'><organization /></author>
<author initials='R.' surname='Mahy' fullname='R. Mahy'><organization /></author>
<author initials='P.' surname='Matthews' fullname='P. Matthews'><organization /></author>
<author initials='D.' surname='Wing' fullname='D. Wing'><organization /></author>
<date year='2008' month='October' />
<abstract><t>Session Traversal Utilities for NAT (STUN) is a protocol that serves as a tool for other protocols in dealing with Network Address Translator (NAT) traversal.  It can be used by an endpoint to determine the IP address and port allocated to it by a NAT.  It can also be used to check connectivity between two endpoints, and as a keep-alive protocol to maintain NAT bindings.  STUN works with many existing NATs, and does not require any special behavior from them.</t><t>STUN is not a NAT traversal solution by itself.  Rather, it is a tool to be used in the context of a NAT traversal solution.  This is an important change from the previous version of this specification (RFC 3489), which presented STUN as a complete solution.</t><t>This document obsoletes RFC 3489.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5389'/>
<seriesInfo name='DOI' value='10.17487/RFC5389'/>
</reference>



<reference  anchor="RFC5288" target='https://www.rfc-editor.org/info/rfc5288'>
<front>
<title>AES Galois Counter Mode (GCM) Cipher Suites for TLS</title>
<author initials='J.' surname='Salowey' fullname='J. Salowey'><organization /></author>
<author initials='A.' surname='Choudhury' fullname='A. Choudhury'><organization /></author>
<author initials='D.' surname='McGrew' fullname='D. McGrew'><organization /></author>
<date year='2008' month='August' />
<abstract><t>This memo describes the use of the Advanced Encryption Standard (AES) in Galois/Counter Mode (GCM) as a Transport Layer Security (TLS) authenticated encryption operation.  GCM provides both confidentiality and data origin authentication, can be efficiently implemented in hardware for speeds of 10 gigabits per second and above, and is also well-suited to software implementations.  This memo defines TLS cipher suites that use AES-GCM with RSA, DSA, and Diffie-Hellman-based key exchange mechanisms.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5288'/>
<seriesInfo name='DOI' value='10.17487/RFC5288'/>
</reference>




    </references>


<section anchor="test-vectors" title="Test Vectors">

<section anchor="sample-encryption-tlvs" title="Sample Encryption TLVs">

<t>TODO</t>

</section>
<section anchor="interest-encapsulation-examples" title="Interest Encapsulation Examples">

<t>TODO</t>

</section>
<section anchor="content-object-encapsulation-examples" title="Content Object Encapsulation Examples">

<t>TODO</t>

</section>
</section>


  </back>

<!-- ##markdown-source:
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
VrLvd5//P8KwZYclVQAA

-->

</rfc>

