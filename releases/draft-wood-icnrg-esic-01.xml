<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-wood-icnrg-esic-02" category="info">

  <front>
    <title abbrev="CCNx-ESIC">Encrypted Sessions In CCNx (ESIC)</title>

    <author initials="M." surname="Mosko" fullname="Marc Mosko">
      <organization>PARC, Inc.</organization>
      <address>
        <email>marc.mosko@parc.com</email>
      </address>
    </author>
    <author initials="C.A." surname="Wood" fullname="Christopher A. Wood">
      <organization>University of California Irvine</organization>
      <address>
        <email>woodc1@uci.edu</email>
      </address>
    </author>

    <date year="2017" month="September" day="12"/>

    <area>General</area>
    <workgroup>ICNRG Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes how to transport CCNx packets inside an
encrypted session between peers that share a traffic secret, such
as that which is derived from <xref target="CCNxKE"/>. The peers create an outer naming
context to identify the encryption session in one direction
between the consumer and the producer. The consumer sends encrypted
Interest messages to the producer, who responds with encrypted Content Objects.
Inside the outer context, the consumer sends Interests with different
names, which the producer may respond to or may send InterestReturns for.
There does not need to be a naming relationship between the outer names
and the inner names.  The inner content is still protected by normal
CCNx authentication mechanisms and possiby encrypted under other schemes.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>CCNx packets <xref target="MESSAGES"/> contain a fixed header, optional hop-by-hop headers,
a CCNx Message, and a validation section.  Encrypted Sessions in CCNx (ESIC)
describes how to to transport encrypted CCNx packets inside other CCNx packets.
The outer packet (the wrapper) uses a CCNx name that identifies the encrypted
session while the inner (encrypted) portion remains hidden and private to
an outside observer.</t>

<t>ESIC defines a new field Encapsulated (T_ENCAP) that may occur in both an Interest (T_INTEREST)
and Content Object (T_OBJECT).  The T_ENCAP field contains the encryption of the
inner CCNx Packet.</t>

<t>Because the use of an outer CCNxPacket, the total packet length of the inner
CCNxPacket may need to be limited to less than the maximum of 64 KB.  ESIC allows the
use of a compressor before the encryptor, so it is likely that a packet that would
overflow the 64 KB limit could be compressed by enough to allow for an outer CCNxPacket.
This consideration for the PacketLength is separate from concerns about path MTU.</t>

<t>It is a requirement of ESIC that one inner packet fit in one outer packet.  This is
because ESIC does not define a method to issue extra outer interests to fetch extra
outer content objects.  It relies entirely on Interests generated by the consumer application.</t>

<t>ESIC defines a control channel within the outer context by using special names
with the inner packets.  These names allow signaling between the two encryption endpoints
for features such as alerts and rekeying requests.</t>

<t>ESIC defines how to use a traffic secret (TS), such as derived from CCNxKE, to encrypt
multiple packets in a consumer-producer session.  Each direction will use separate
derived keys.  If one wishes to have a reverse traffic flow (interests from producer fetching
content objects from the consumer), then one must share a second TS and use it with
the roles reversed, but otherwise it works exactly as in the first case.</t>

<t>The mechanism by which this symmetric key is obtained is outside the scope of
this document; These keys could be pre-shared or derived from an online key-exchange
protocol <xref target="CCNxKE"/>.</t>

<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in RFC 2119 <xref target="RFC2119"/>.</t>

<t>The following terms are used:</t>

<t><list style="symbols">
  <t>Inner Packet: A fully-formed CCNx packet (fixed header through validation) that is
carried encrypted inside a T_ENCAP TLV.</t>
  <t>Outer Packet: A fully-formed CCNx packet that carries the outer context of an encrypted session.</t>
  <t>Outer Name: The name of the outer packet.</t>
  <t>Inner Name: The name of the inner packet (not visible in transport).</t>
  <t>Control channel: the use of Inner Packets to convey control signaling between encryption endpoints
using a special Inner Name.</t>
</list></t>

</section>
</section>
<section anchor="stateless-packet-keys" title="Stateless packet keys">

<t>ESIC assumes that the consumer and producer share a Traffic Secret (TS), usually derived
as per CCNxKE.  Regardless of  how the TS is derived (TODO: it needs to meet some so-far
unstated requirements), there are four secrets
derived from the TS, as per CCNxKE Section 9.5.  This
specifies how to generate the Client Write Key, Server Write Key, Client Write IV, and
Server Write IV.</t>

<t>The AEAD nonce (IV) is derived as specified in <xref target="TLS13"/>. In particular, the length of
the IV for each AEAD operation is set to max(8 bytes, N_MAX), where N_MIN must be
at least 8 bytes <xref target="RFC5116"/>. With this length, the nonce is initialized by:</t>

<t><list style="numbers">
  <t>Padding the 64-bit per-packet AEAD sequence number to the left with zeroes so that
its length is equal to the IV length.</t>
  <t>This padded sequence number is then XORed with the consumer or producer IV, depending
on the role.</t>
</list></t>

<!-- for AES-GCM, the counter starts at zero and nonces are not re-used -->

<t>TODO: Should we allow CCNxKE to specify the starting chunk number so it does not
always start at 0? It would need to be encoded in the MoveToken.</t>

</section>
<section anchor="inner-and-outer-contexts" title="Inner and Outer Contexts">

<t>The inner context is a CCNx packet with meaning to the consumer and producer.  They may be
clear text or they make use additional encryption, such as group keying, broadcast encryption,
homomorphic encryption, or something else.  The consumer sends an Interest packet with an Inner Name
(plus other optional fields as normal) and expectes to get back a Content Object or InterestReturn
packet with corresponding name and fields.</t>

<t>The outer context names the encryption session and sequences packets.  ESIC does not expect
a one-to-one correspondence of outer name and inner name.  If a consumer, for example, sends
3 interests with outer names NO1, NO2, NO3 and inner names NI1, NI2, and NI3, the producer
can return those names in any order.  It could put content objects with name NI3 in NO1,
NI1 in NO2, and NI2 in NO3.  ESIC does expect normal CCNx processing rules to be followed for
the inner packets, therefore we would expect at most one inner packet returned for each
inner Interest.  That inner packet could be either a Content Object or Interest Return.</t>

<section anchor="outer-context-names" title="Outer Context Names">

<t>The outer context name is a routable prefix PREFIX followed by a session ID (SID) followed
by a ChunkNumber (Chunk).  The chunk number is a monotonically increasing number.  The outer name
is clear text, visible to all observers.</t>

<t>The PREFIX and SID are derived outside of ESIC.  In normal use with CCNxKE, the PREFIX is either the same
prefix as used in the key exchagne or it is derived from within CCNxKE from Prefix2 or the MoveToken.
The SID is created by the producer and given to the consumer inside CCNxKE.</t>

<figure><artwork><![CDATA[
OuterName := ccnx:/PREFIX/SID=sid/CHUNK=chunk
]]></artwork></figure>

<t>Chunk numbers are limited to 8 bytes and do not wrap around.  When the consumer gets near the
end of the sequence number space, it must request a re-keying via the control channel.  Because CCNx in
a pull-driven model, the consumer is reponsible for the chunk number and thus responsible for requesting
the re-keying.  The producer may also request a re-keying for its own reasons.</t>

</section>
<section anchor="outer-packet" title="Outer Packet">

<t>The outer packet will have a Fixed Header, per hop headers, a CCNx Message with the Outer Name,
and a Validation section (ValidationAlg and ValidationPayload).
The outer packet is visible to 3rd parties in its entirety.  Only the ‘value’ of
T_ENCAP TLV field inside the CCNx Message is encrypted.
The T_ENCAP TLV Value is the AEAD ‘plaintext’ that will be converted to the ‘ciphertext’.
In the outer packet, only the CCNx Message and the ValidationAlg are covered by the authentication token</t>

<t>The Outer Packet has a Validation section.  The ValidationAlg will have a 0-length ValidationType of
T_SESSION, which indidates that the encryption context must be derived from the SID in the
name.</t>

<t>The Associated Data (in AEAD) covered by the validation output is from the beignning of the CCNx Message
up to but not including the T_ENCAP Value concatendated with the ValidationAlg TLV.  That is, it skips the
T_ENCAP TLV Value.</t>

<t>The ValidationPayload contains the AEAD authentication token.</t>

<t>If the Producer cannot satisfy an Inner Packet Interest, it will encapsualte an InterestReturn inside
an OuterPacket of PacketType ContentObject.  That is, the InterestReturn is end-to-end signaling about the
inner context.</t>

<t>If the Producer has an error with the Outer Context, it may return an InterestReturn for the outer context
as normal for Interest processing.</t>

<section anchor="consumer-outer-packet" title="Consumer Outer Packet">

<t>The outer packet from the consumer to the producer will always be of PacketType Interest.
They may have any of the normal Interest per-hop headers (e.g. InterestLifetime), which will be
visible to 3rd parties and not protected by the encryption or authentication.</t>

<t>The Outer Context has a T_INTEREST message type, which contains a T_NAME of the Outer Name.
It may have other additional metadata in clear text.  The T_INTEREST container is protected by
the encryption authenticator.  Finally, the T_INTEREST has a T_ENCAP field that contains
the encryption of the Inner Packet.  The encryption will use the algorithm negotiated as
part of the SID (i.e. AES-GCM).</t>

</section>
<section anchor="producer-outer-packet" title="Producer Outer Packet">

<t>The producer will only send PacketType ContentObject back to the consumer.  The Inner packet
may be either an InterestReturn or a ContentObject corresponding to the Inner Packet interest.</t>

<t>The outer packet may have per-hop headers (e.g. RecommendedCacheTime) that affect the encrypted
packet.  These are independent from the inner Per Hop headers.  The outer MessageType is
always T_OBJECT.  It may have normal metadata for a content object, such as ExpiryTime, which affect
only the outer packet.  Finally, it has a T_ENCAP that contains the wrapped inner Packet.</t>

</section>
</section>
<section anchor="processing-chain" title="Processing Chain">

<t>The processing chain from the Source to the Sink is shown below.  The
compression/decompression stages are optional and are not strongly tied
to the encrypted session.  If used, we assume the compression protocol is
session specific to avoid state snooping (e.g. such as in CRIME attack).</t>

<figure><artwork><![CDATA[
() indicates output of stage
+------------+   +-------------+   +-----------------+   +---------+
| Source     | - | Compresser  | - | Encypter/Framer | - | Channel |
|(CCNxPacket)|   |(CCNxzPacket)|   | (CCNxPacket)    |   |         |
+------------+   +-------------+   +-----------------+   +---------+

+------------+   +--------------------+   +-------------+   +------+
| Channel    | - | Deframer/Decrypter | - | Decompressor| - | Sink |
|(CCNxPacket)|   | (CCNxzPacket)      |   | (CCNxPacket)|   |      |
+------------+   +--------------------+   +-------------+   +------+
]]></artwork></figure>

<t><list style="symbols">
  <t>Source: The source of an Inner Packet.</t>
  <t>Compressor: Optional component to reduce the size before encryption.</t>
  <t>Encrypter/Framer: Creates the ciphertext of the CCNx(z)packet to produce
 the T_ENCAP, constructs the outer packet, computes the authentication token
 and generates the ValidationPayload.</t>
  <t>Channel: Carries the wireformat outer packet</t>
  <t>Deframer/Decrypter: Verifies the authenticator, decrypts the T_ENCAP, and
 passes the Inner Packet to the Decompressor.</t>
  <t>Decompressor: Optional component to expand the inner packet</t>
  <t>Sink: The sink of an Inner Packet.</t>
</list></t>

<t>The Encrypter/Framer will generate outer names with sequential outer name
chunk numbers.</t>

<t>The Deframer/Decryptor will extract the SID and chunk number from the outer name
and use those to create the packet key (see below).  Using the packet key,
it will verify the authentication token and if successful decrypt the T_ENCAP.
The output of the T_ENCAP will then be passed to the Sink.</t>

</section>
<section anchor="transport-state-machine" title="Transport State Machine">

<t>ESIC uses a state machine to manage the ephemeral session such that the
Producer knows when the Consumer is finished with the SID.  It also will
try to re-request packets that fail authentication before sending its
own InterestReturn up the Sink.</t>

<t>The protocol begins with each side knowing the four keys (see Stateless Packet Keys below),
the Session ID (SID), and the routable prefix PREFIX.</t>

<t>The receiving process uses a replay buffer to prevent replay attacks.  The buffer
tracks the last N out-of-order verified chunks plus the cumulative verified chunk number.
TODO: Sort this out how to avoid replay attacks without requiring reliable in-order delivery.</t>

<t>Protocol of Encrypter/Framer:</t>

<t><list style="symbols">
  <t>Initialize: set NextChunkNumber = 0, State = Waiting</t>
  <t>Waiting: Wait for packet from Source (or compressor).  On packet receive, State = Send</t>
  <t>Send:
  <list style="symbols">
      <t>Generate packet key for NextChunkNumber</t>
      <t>Create outer packet with name /PREFIX/SID=sid/CHUNK=NextChunkNumber and the
input packet as cleartext in the T_ENCAP.</t>
      <t>Run the AEAD scheme authenticating and encrypting.  Note the prior description of
the split Associated Data before and after the plaintext.</t>
      <t>Increment NextChunkNumber</t>
      <t>Send the packet</t>
      <t>State = Waiting</t>
    </list></t>
</list></t>

<t>Protocol of the Deframer/Decrypter:</t>

<t><list style="symbols">
  <t>Initialize the replay buffer to empty, State = Waiting.</t>
  <t>Waiting: wait for packet, on input from channel State = Receive</t>
  <t>Receive:
  <list style="symbols">
      <t>Extract the SID and ChunkNumber from name</t>
      <t>If replay, drop</t>
      <t>Authenticate the packet
      <list style="symbols">
          <t>If failed on consumer, send InterestReturn to Source with “X Error” (TBD)</t>
          <t>If failed on producer, send failure message to Sink so it can send end-to-end InterestReturn
back over channel (if desired) with “Y Error” (TBD)</t>
        </list></t>
      <t>Add packet to replay buffer</t>
      <t>Decrypt packet</t>
      <t>Pass decrypted packet to Sink/Source (or decompressor)</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="control-channel" title="Control Channel">

<t>The consumer and producer will need to exchange signaling about the encryption context.
Control and data traffic should be indistinguishable to
an external observer.  Therefore, all control signaling is done within the same
outer names as data traffic.</t>

<t>Control signaling is done with a normal Inner Packet that pushes data to the other side.
We use an Interest with an Inner Name of the form shown below,
where ‘<spanx style="emph">direction</spanx>’ is ‘up’ from the consumer to producer or ‘down’ for the producer to consumer.
This allows each side to maintain its own sequence number space in the ‘seqnum’.  This is similar
to the use of the sequence number in the DTLS record layer.</t>

<t>Like DTLS, ESIC control messages are unreliable, though they are uniquely named.</t>

<t>The payload of the control Interest uses a TLV equivalent of the TLS record format
for handshake and alert messages.  Application data is never communicated in these
records, as they use an Inner Packet with a different Inner Name.
Inside the payload, a TLV type of Alert (21) or Handshake (22) indicates the purpose of
the TLV value.  One may concatenate multiple records in to one payload.</t>

<figure><artwork><![CDATA[
ControlName := ccnx:/localhost/esic/_direction_/SID=sid/SEQNUM=seqnum
]]></artwork></figure>

<section anchor="esic-control-packets" title="ESIC Control Packets">

<t>A control packet is a CCNx Interest Inner Packet.  The name of the control packet is
as above in the /localhost/esic namesapce.  The Payload of the Interest is the actual data.</t>

<t>The ESIC control packet SHOULD be padded out to a length that is indistinguishable
from other traffic in the given <spanx style="emph">direction</spanx>.</t>

<t>The Payload of the Interest contains a set of TLV records using the normal CCNx TLV encoding.
The TLV types and values are defined in the next section.</t>

<t>In the ‘up’ direction from the consumer to the producer, a control packet can be inserted
into the Interest stream as normal.  The producer may use this extra outer name to return
its own control message or send a “no-op” back to consume the extra name.</t>

<t>In the ‘down’ direction from the producer to the consumer, there is no pre-allocated
outer name available.  The producer can only send the consumer a control message if the
consumer has outstanding Interests up to the producer.  If there is one or more oustanding
interests in the outer name space, the producer normally would send a Content Object or Interest Return
corresponding to some inner name.  In this case, the producer would instead inject a control
packet Interest in the downstream.  This means the producer is now short one outer Interest in the
upstream direction.  Therefore, whenever the Deframer/Decrypter sees a control message
in the downstream direction, it MUST insert an upstream “no-op” packet, padded out to
statistically undetectable length, to give the producer back a missing name slot.</t>

<t>We allow one ESIC control packet in one outer packet.  However, we allow multiple
Alert messages to be encoded in the payload, so long as it remains indistinguishable
from other packets in the given <spanx style="emph">direction</spanx>.</t>

<t>Example from a consumer to a producer, where “NO” means “name outer” and “NI” means “name inner”.</t>

<figure><artwork><![CDATA[
Consumer                                   Producer
   | >------- NO1 : NI1 (Interest) -------->   |
   | >------- NO2 : NI2 (Interest) -------->   |
   | <------- NO1 : NI1 (ContentObject) ---<   |
   | >------- NO3 : NI /local/esic/up/2/1 ->   |
   | <------- NO3 : no-op -----------------<   | (no-op)
   | <------- NO2 : NI2 (ContentObject) ---<   |
]]></artwork></figure>

<t>Here is an example from a producer to a consumer.  The producer uses the
second avaialble name NO2 to send a control message to the consumer.  The
consumer must then send a no-op packet back up to the producer so it
can return the final data packet NI2 inside NO3.</t>

<figure><artwork><![CDATA[
Consumer                                   Producer
| >------- NO1 : NI1 (Interest) -------->   |
| >------- NO2 : NI2 (Interest) -------->   |
| <------- NO1 : NI1 (ContentObject) ---<   |
| <------- NO2 : NI /local/esic/dn/2/1 -<   |
| >------- NO3 : ----------------------->   | (no-op)
| <------- NO3 : NI2 (ContentObject) ---<   |
]]></artwork></figure>

<t>TODO: Add examples with loss</t>

</section>
<section anchor="esic-control-messages" title="ESIC Control Messages">

<t>ESIC adopts the TLS 1.3 Alert Protocol for its control messages.  The TLV type of the message
inside the control packet payload is taken from the enum AlertDescription.  As per TLS 1.3,
fatal Alert messages are an immediate close of the ESIC session.</t>

<t>As per TLS 1.3, each party MUST send a close_nofity message closing the write side of
the connection.  In ESIC, this means that when a consumer is done requesting data, it should
send a final close_notify.  The producer should then use this outer name to send back its
own close_notify.  If for some reason the producer must close before the consumer, it should
inject its own close_notify discarding all remaining data and the consumer should send
back upstream a close_notify.</t>

<t>The KeyUpdate messages function as per TLS 1.3 Sec 6.3.5.3.  Either side may generate a KeyUpdate
message and begin transmitting with the new key.  The other side must update their own key
and issue its own KeyUpdate message.</t>

</section>
</section>
<section anchor="the-esic-api" title="The ESIC API">

<t>In this section we describe the ESIC API. Before doing so, we highlight some details that
molded the API for both consumers and consumers.</t>

<t><list style="symbols">
  <t>Encrypted sessions are bound to names instead of addresses. Consequently, in addition to 
a set of trusted keys, sessions between a consumer and producer require only a name to be created.</t>
  <t>Sessions are created by an active consumer with a passive peer (producer). Thus, the API must
reflect these roles.</t>
  <t>Consumers send and receive whole CCNx messages over a session. Thus, simple read and write
functions must be exposed via the API.</t>
  <t>Sessions are not full duplex by default. A producer must specify in its ServerConfiguration construct
that it wishes to send interests to the consumer. To maintain transparency, the modality of the resulting 
session is not reflected in the API.</t>
</list></t>

<t>These observations are distilled in the following ESIC API.</t>

<figure><artwork><![CDATA[
# @Consumer: create a secure session with a producer
CCNxSecureSession *ccnxSecureSession_Connect(CCNxPortal *portal, 
    PARCIdentity *identity, CCNxName *servicePrefix);

# @Producer: create a passive listener
CCNxSecureSession *ccnxSecureSession_CreateServer(CCNxPortal *portal, 
    CCNxKeyExchangeConfig *config, CCNxName *servicePrefix);

# @Producer: accept uni- and bi-directional sessions
CCNxSecureSession *ccnxSecureSession_AcceptConnection(CCNxSecureSession *session);
CCNxSecureSession *ccnxSecureSession_AcceptBidirectionalConnection(CCNxSecureSession *session);

# Send a CCNx message
# Override the outer name with the `response` parameter if needed
void ccnxSecureSession_SendMessage(CCNxSecureSession *session, 
    CCNxTlvDictionary *message, const CCNxStackTimeout *timeout, CCNxName *response);

# Receive and decapsulate a CCNx message
# Store the outer name in the `response` parameter.
CCNxMetaMessage *ccnxSecureSession_ReceiveMessage(CCNxSecureSession *session, 
    const CCNxStackTimeout *timeout, CCNxName **response);
]]></artwork></figure>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>It may be possible for an observer to identify which outer packets contain a control (alert) message
if the ACK response time shows significant statistical timing different from the normal
flow of messages.</t>

<t>TODO.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC5116" target='https://www.rfc-editor.org/info/rfc5116'>
<front>
<title>An Interface and Algorithms for Authenticated Encryption</title>
<author initials='D.' surname='McGrew' fullname='D. McGrew'><organization /></author>
<date year='2008' month='January' />
<abstract><t>This document defines algorithms for Authenticated Encryption with Associated Data (AEAD), and defines a uniform interface and a registry for such algorithms.  The interface and registry can be used as an application-independent set of cryptoalgorithm suites.  This approach provides advantages in efficiency and security, and promotes the reuse of crypto implementations.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5116'/>
<seriesInfo name='DOI' value='10.17487/RFC5116'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>


<reference anchor="TLS13" target="https://tools.ietf.org/html/draft-ietf-tls-tls13-13">
  <front>
    <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
    <author initials="." surname="RTFM, Inc" fullname="E. Rescorla">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="CCNxKE" target="https://github.com/parc/ccnx-keyexchange-rfc">
  <front>
    <title>CCNx Key Exchange Protocol Version 1.0</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="MESSAGES" target="https://tools.ietf.org/html/draft-irtf-icnrg-ccnxmessages-02">
  <front>
    <title>CCNx Messages in TLV Format</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>

    <references title='Informative References'>





<reference  anchor="RFC5389" target='https://www.rfc-editor.org/info/rfc5389'>
<front>
<title>Session Traversal Utilities for NAT (STUN)</title>
<author initials='J.' surname='Rosenberg' fullname='J. Rosenberg'><organization /></author>
<author initials='R.' surname='Mahy' fullname='R. Mahy'><organization /></author>
<author initials='P.' surname='Matthews' fullname='P. Matthews'><organization /></author>
<author initials='D.' surname='Wing' fullname='D. Wing'><organization /></author>
<date year='2008' month='October' />
<abstract><t>Session Traversal Utilities for NAT (STUN) is a protocol that serves as a tool for other protocols in dealing with Network Address Translator (NAT) traversal.  It can be used by an endpoint to determine the IP address and port allocated to it by a NAT.  It can also be used to check connectivity between two endpoints, and as a keep-alive protocol to maintain NAT bindings.  STUN works with many existing NATs, and does not require any special behavior from them.</t><t>STUN is not a NAT traversal solution by itself.  Rather, it is a tool to be used in the context of a NAT traversal solution.  This is an important change from the previous version of this specification (RFC 3489), which presented STUN as a complete solution.</t><t>This document obsoletes RFC 3489.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5389'/>
<seriesInfo name='DOI' value='10.17487/RFC5389'/>
</reference>



<reference  anchor="RFC5288" target='https://www.rfc-editor.org/info/rfc5288'>
<front>
<title>AES Galois Counter Mode (GCM) Cipher Suites for TLS</title>
<author initials='J.' surname='Salowey' fullname='J. Salowey'><organization /></author>
<author initials='A.' surname='Choudhury' fullname='A. Choudhury'><organization /></author>
<author initials='D.' surname='McGrew' fullname='D. McGrew'><organization /></author>
<date year='2008' month='August' />
<abstract><t>This memo describes the use of the Advanced Encryption Standard (AES) in Galois/Counter Mode (GCM) as a Transport Layer Security (TLS) authenticated encryption operation.  GCM provides both confidentiality and data origin authentication, can be efficiently implemented in hardware for speeds of 10 gigabits per second and above, and is also well-suited to software implementations.  This memo defines TLS cipher suites that use AES-GCM with RSA, DSA, and Diffie-Hellman-based key exchange mechanisms.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5288'/>
<seriesInfo name='DOI' value='10.17487/RFC5288'/>
</reference>




    </references>


<section anchor="test-vectors" title="Test Vectors">

<section anchor="sample-encryption-tlvs" title="Sample Encryption TLVs">

<t>TODO</t>

</section>
<section anchor="interest-encapsulation-examples" title="Interest Encapsulation Examples">

<t>TODO</t>

</section>
<section anchor="content-object-encapsulation-examples" title="Content Object Encapsulation Examples">

<t>TODO</t>

</section>
</section>


  </back>

<!-- ##markdown-source:
H4sIABj3t1kAA61ca3cbx5H9Pr+iV/4gwgFAi9rk2IydNQ1RFlciqRCU7Jw9
e5ThTIOYaDCNzIMk/Mhv37pV1T09AGTJOcscR+Q8uqur63Hr0TOZTJK2aEt7
bE6rrN6sW5ubuW2awlWNOavMbHbxYA5O52ezUZLe3NT27pivTXApyV1WpSt6
Oa/TRTu5dy6fFFlV305sU2STMm1t0yYZ/XPr6s2xKaqFS5JiXR+btu6a9uiL
L7764ihJa5sem+9tZeu0TO5d/f62dt362JzNLq6+Nz/QhaK6Nd/jYvLebuiJ
nG5Wra0r206eYfIkadq0yt+lpauIoI1tknVxbP6nddnYNK5ua7to6LfNCr/8
b5KkXbt09XFiJomhn6Jqjs351Jy75r3jK7Ky87TOoouuvj02r0+uZmOaP5vy
NbtKi/LYrOjJ6QpPfrvGr5lbDQafTc3JlBbj8mj42bIumtatl7Ye3OV53lTF
na2bot0YtzCztCwWrq6K1JzVd0Vl48nB+uzJt11WTG3eJUnl6lXa0uvH/NTV
89kfnzz5U/jj6MmTr+SP61fzJ0/lV/y0aX1r22OzbNt1c3x42DpXNtPCtosp
kXS4bFfloWw2rk3assF/T55OnjztxxCBul5ac12nVbMm7ptX6YaWOLdZV2M9
BzTvyLyuHe2PK81bLNNV5sm0HyZsUPQjTDudmivbZK4u08FdZvPV9fPzaHMg
rC9PP7zA26JddjfYrEPs2mGWVQ8TkjH7kC3T6tZO6kVmtpfGWvHSbsypPrVv
JV/wW+en8/nJ96fzf4vFNbFY9AlkrUgv01vbTEhl9hF0rveJD7Stb81zlgHS
N9K6HWl4+uVX/R9HX355nCSTycSkN01bpxm9db0sGkMK3q1s1Zqc+F0XNzT4
0t2b1pH++p3luddp9t62mLopcmvSKrHBnjRiT8yNbe+trczaEo9Mu0xb0yxJ
902K0RaLIqNHs9q2pKZdtkxSfeh+WWRLA2psTWvIzaJ2K/Pzz7K1v/46ZVGT
Uel1sjY0v3EdmQcIDJmOJHNkLB5aEE7kVW2x2NDY1iiRoM5TScwjC2LyorYZ
biSebDxP4zTEkJomyPnCunZ5l9laaAi3G1vljQksSNhWkS00fg+ZhdH7Y1ql
M/TI2uHNe5LK/nUzA/m0C5c3/yCimimNx2zGCLJOXeB4SKWQ4SfXYfNisaC/
qzaBNjVj5W9MDdmyjScGlDq5guHCaFe27WpyEiRbUxIWukbSQgurXGsqa/m9
G+ytbAENR+4AbmVZrE3M07BRZLI9W4uq8temhlkrVzJlBAlD0xZlCYpbYglN
d7MxbPTKhAUS1gMbnfGkxHcoatGsGt66taPNpjd6FncVSZdxLQxxky0tZhaV
WBV5Xtok+QxLZwaxWCQDuf/5Z6/ov/7KVKYkR6lZFA809tKmObbYsaSlJenQ
enKzmdA/eq8ZJ+lAicdMZmruyOjnqQooT0z82OOqi6Gr3lXXWGMjwdqju8KD
+A7vr+6TXDIH2KX7Ol2vbT0yHSmP0QVg00RvVdMKSHuva6QNXtVI8Eob7fdB
eGRkQCieqeHgaIFL2gUSGN48sgJQ8tYloudC9k1ja3KXtGvgARmLBflIkFXZ
e9oIW+ZgXLpuOuCSnFzQu9OL2cnrkVALAXcZuSfw8oaYACMS9JYePru4Pr06
nV+PWEqHKon7l9/99+nseqTyqoPrxCoRzbbRIbdOVxJZPrPvNfOXFvGdzVLi
K7+Bf+nRYNXwpDwoCt+6lqRKt6a01S1RL0MLZ5P+BV5npJ9lsSpa+aukbQEv
RC1X6UOx6lYY50//aV5+B7kDX9OydPe8kMSTRctbrYlNBLNoSDIINl6nqwHA
TMFaWxbvbbkRjqeeYrHyrivzxNEOLkrILA3A8wqFNAXdBsF+LlF5W7nudgnq
mS5Yo31smoo7g2EkWalFofAsppFHXgnbYFksIQEIGPsZeocsIm1dekOjEsn0
0Pn1G9qhM15RSiL6z468BftJYgdziZcEPyJbqwtdgAniX2JtYpGhoYqGnI3s
uoiwt6ciyzTVyhIm4s0qmqYjFj+QVutYRTDzdHthW7LpfDuJPAQoVB9iDNFP
RhnqCT2tsS+uirzFLQNyta1D77del2pZd9UNE9WEhGBwK1uy0ymqXV+FUbsG
rqFZ26wgARYfwE6qNwreBrFaEWf4Id3tprglc4ohYofS3rtYx8hprR0xp0mw
4QvCBx2tjyGGSTGSrVvxCrUl4Ce+6p8dWLC9ODWm2KBtzEIWYD4ah1EHUEWA
yhivKl3JqivbYk3Wrze+wjpm8CQ4YjWVUL40W/aohLhK3g+EeGlN/JS0Bt7d
BcvZfdEsBW4s0zvL0oqYwgbyWdsOeuFhisP8LEcBQfXiI4/FQjFiUyTCvaLY
LmA74g9gxPWceQySSQuwyQleJ0kh8pSofGxuSMfYAxHh8iRFfyShDwRKSUBT
5hReXBQ1TZKljZ0m7J+Ci4dgeUwDdd6sSG1qWipxBhrrbmCLiVP4Xb0HRqSI
Yg2DlrQx9P2zyh3Y2lshMkETXmAOcDTYbZifqoS+0isTH0ckax8hRMCVQMVn
Bq7kDhoIPw4WXduaEJMr3e1GVga6EfM25tH5m/n1o7H8ay4u+fer07++Obs6
fYbf5y9OXr0Kv/gn5i8u37yi+4n+1r85uzw/P714Ji/TVbN16fzkb48Eizy6
fH19dnlx8uqR7AAZqxAdYKPFnbAcEXNgNVgNBIfkeIciDYPAkzigISizACtc
OOgzVI9eB0ar2enliErIIsEOiJU+Nidm0ZXlZoKYZohgzEEMt4jEmn1DD6HU
0xPlWVrXBT3aIyEfuATHTRHUlCa/ZJP1CZPz0DJus8fYifveCYr6KS44tAUz
GEGp+x64icCL/c8OXM0B/MZdQSi3tLxhHv2NMMxsaKOPY5QRs5sNRwb53AS7
vmt09xpbo8Y9Dea9px2Cb+YtWS3GHEoyNEwNbtrApmj8txN49dZRTcy12rJ5
bIq7piMvsfHKiXByraDg5SkZyCt7m9Y5E0CrFtsO4DaPQ82D68tnl8ewQ8BM
zI6VpSkaR3xv3GSR1klXNS27yQgINGIOQV0N8e5q9RNNMjAWMuPYDIjDOpib
X03/qNggYSYyllYn5L0zDzEjN056+ENNWA6JiTENATAcXxk8c/aWtToZPHb2
VtXx5PTkGQEPAj7m4OztKGYIEepJYaX++WfOICEKP6PQPiXUnhHArgWYBizK
tv7sLWMuC0/GU5C9VSzGsIvjc8KdB1+SCW8Rml68Oz/5cYQQFaykv84uxLnc
2CQF1E3pd31azArSXCDmB0ERgJxMg9AjawLUqoqWZLL4idENmZknUxL5PGcT
xNBzckObvoYvFulkghsAAwxRdasb2Biny1yISzM/2RqgrXEsuknR+vkxKb1M
aqDvEDPkzjQ5mgr+WxMBbBqGkxSNeNYfL6/oboBHQSWIpUEjsK+5XZMawmk7
cZXwsbSzX/8HRbPYgJPT+eT72blPFnSw2RRPp4yDWl4D6xlzS4wxrAm5PNhk
M5n8hcSE9WK+ZId4bxWQqfzSEkVIBDfy0OBstuyq935ZEhN4jJuk5X26aeRZ
UPHFfwGgclQQxyvEGJeL6GHocwoYrt17W00lQK/URIhNnYnxbUSqoxTCg0L3
2IAzY1eWIARkwH3Y7AgU3XAkRXKYkRSSJLCR54ACd96LOYVEaczfG8keJXKa
2wjoJOhTuzTPINHRs8nSreh/9ZoAzWAMV7MRAra+NbYkGGT25aDiIDZeKF/3
9jg5WJddo5F/yFJw6NqATkmsjJgL9mGNhEsjNog0kQYFJ4fxMFE3TBQl8eSZ
qzW7BOLZh2FomVBt0NB9Cur/QMoO73qlaaKAYRhECeFJCoQ6ad0EQLUnhBWO
/ECfjeJh+0SUQOoeo4/Flj2kK4LxY+F28jSKwnilUXKLQNcTsmiXR/i/p1uj
090z3D07ErR1cfZ0PEjJEWRBMgSspOsuBEKIGyoK3OqcBfPMR8rrrt0O+YQi
XhoNjzdBUUITy+9h6iP5++mAhcI+FQVVnNpl2AJETF0pInHjwRw8nKuTnUBO
/SJnCchuiILr4EjDuGZP4CwLlyHZf2jKxMsYyz6gXfxSAOu2YMH+LSE1IqWC
yAfGgxWk+ZBMagaAbqQAWoR8CYOa11enz89+7BlBAUkapPXsmTmYnz0bhdsJ
357BNl6IaTzgP3wqaWA1eb6VI4F2FYXgADhFhaw3b4M8pO/1spcg9xHM1Djg
QkmbhNSZVz0lH8JAhLL99+4/ZNskzwGJq7xMwOCxiIV4tx8L3k92gR0CaFJe
kXlhr6IGHbEOx0y3SJLUmjYaYCZNKKiv4UuveawjNcCxV8B6sIjC1wZCNiP4
TKzzloavdqy+BgUKGZPkX//6V8LCAZkwx98YlGWOD2WNhzTNN/T84ezFm4uX
3/Cu8RvJLNpAcadR1s2jF1CRO7ZUyKvSY+SYc2LwD8vt4sMtgHnF27m0CZLy
GgFsI4eGNIFsE/GQQZOmNTgJMNFUx12R+sHjiIDm9QlIVvWiIsO5pthnktfM
qhV54XKr3FAgkF8jxwbh8um1gfhKgr9rtLrQP6m0AbUwZPEEqiwPKhNp2bi9
i1mwwJAju4etTBuaINZoiWmS3Ww2J1M0P/KcY8gXmrIHKI/T9GaYpu/RWB/E
jRNJ3b/dSd2bg/7aSXnLzOivvE43JQGA0Z5sOzE2UtmndS5AW8w/FiwJvHZD
3LqsSpHvxxT4dvYxwHcU02pCuugLSIP1FFHVSgiJ332LERWPCiB+vC7Tgs3h
Y03jgpWcpqWgsVYZZ3KyAlVufhQFrJ3wdoy0yWaXJF8T2uJdjTloil6ht0o+
LQyAbHa8/bTPzd7dUUkbThNLxhcThfL9I9cbyRhdv5ufzudnlxe+mlYQtMnT
Ng5hI+DiPYiGMmYnJGSLxSziIp0Py5rGUSQNpj5L2xRZO96F0TYnoqoRcRhQ
oIgydjeWInhGuWo2YnYnBEjhxruWTRH5lrILUZGXBZEDZMaJmCpnioImDBmI
NIp3zg2bouZ9sZb6wY5o6Tp3dGJYP2HB27fZyMnLil57c0GoCcto6KmGopGA
elUWvPsfS06yZJiOElFaShV5CGJVbVB2YpHSUYiN8huLg4IMwRjx2jnq2xoP
6pYDjcKK95kVqTX0pSEVmD0LZGmujK1rsn1b1mjmi8JFqxVdnnR3Wd5UD/BN
EoA/3++jiID6iBwyrp9hHnEAHzGzOznj7Sq4bIFGgjd2i7EB7CUh/BLNrDZe
kpXenlaK3yPzbQ7s9HYabr8qFrYtVnbktVaNV/IBYysxcTssOm9X9Oot0ZzG
JshjSrFBfU3R9wWYlhbqqQlCjycvTs5P/Sp7XzNFESowQuK3KOak8DDNYSnI
UPT4L1Qow+w6k7jweHXJ1uqipTnAzOdFBQg6VusQBvTri2ugkiDVNW0PrCuL
lVPJjB4KNQ+29uWtq0neV4SEbl0rZjFtEmyWHw5m9KCYUuymKY+RF9mgP7si
OxRG9knc+PAhFZcIeAs6KvFnUTySSL4gRCM7WuiiEEWHHgbKPnMUW7AiKMWu
vgXB2K8GVzZzqxUtzeYzCqnsNVRBS7OLBaaPNonClKhYiYIIPDC5OU42IagK
2i0m6zX996KfcxCTqK9hXhaNT/34ErqEsYF41ekgy1zi3Ypt+5TK6cO6qDdY
ilcjWUsSwMVW5TWIcNFuie1AYPlVaXjwcXso1Ys8+VB4tqTngyj5qxmuRg7e
dXVm/Y7OC0LISIEugVxvLIWFwq/EV7tJ/A9zG/2FRNmtJudCxoaBp2brGoLz
1S3WXNDe6US79QfOanRcekMWj/PuKsn9XKF2hUS0n1+ywBkHkXeuyA1nwU1T
ObfGikXI/L4gYLs6IxuWti3xbaTR1MGIoVLGUEmxCikvLy75wyT6+YMxZnBh
z5Xdq39IfvG8xs8vZkL/zXwLQe2vnFYZ2FIfPq9T+CV9TivYvyS/HPS9BKNf
MBBf+Cm+YuJnZDL5T35++f9ZzsdG+ZThwRS/tsCUZ3bBaz98ZkVG6nCjb++Q
Kyyu+5hiBlzRde/wJuLLR5nyacvhKHuiGy2FsUY2XcpuA7fC5S+/oGNz6ZUH
q3QVbEqL6BI+QILq4ifr21p6Z4RhfB+WF5tjM+MUgxiLPt6JcfbBTyNfMHTe
1aAPM4LXY/Yibd0hZ7cbJYHOzk+yN+ZB8yxyGloharZguYJqZoSv/82iwuV9
wem5FTpYopnp8V0ZOUbDa9/jNcAHqETwY81wdag7EYlrMjb62sCjqamKxW7K
c2cf3TX7sB52EAbKIbIqGBDefWLBFnt7SwUEhFpbnM5lsC0ZF5SS4nRbnPLw
SbVt3jkdm3t01Ndyto0WMEiZBJ8RTeA7KSQTjBqt9L0ymA7VVHPQWCvuBLnE
N42P4/pHxokPfO6wjx8OpCVfvYA9h0tbdKXf3XhzQ+5C7XgcNPIsGJj7J1Lu
4Ir8n/jRvmGcy8PmPEX7idWysPYZiqNZyS2pGVYMnuHh1ujdrGk/gqPquBNE
ovAkAL/3FdrY7n1ybRYlsRZFha6ZKKaljRFUwqknrCRp640YionPRPlWHp5r
kRblNiPViDRSnUPiJoG/34KBCMB7niiMEPd7Y28BRaQ7GFVUTuJgJX5nudLM
rSq8932NXZXrpeXIChIxZgw+38pKj0O+ZX9SW0mqbWaLO8yqGMfvTW3XJXBu
hyZjsXEW3S3+hrh/DwflsQQa8F5MQYn61wVEaOIWEy5riGii3sx6QREKilVs
YrsVmjkLQonDZ3wi3JcpIVBcDEZYrQV0AS1Dspi1eEZK+dq3XKTSRKHk5HSF
ptsQK0LbP/Lh295Aeld8nfmYC9wXpO5xpv8b88VYRf0b80NacAJ04n875l8Y
8cYhtAKaA1dHnZcjzv31BRPsj+3HnpPQwQ7SP9z3P9HzNu3AYGCmLRLlYXFs
21lTX07anwHfXqsKVqJnNdZdqEimWp6Qwmw1tCg8/1VX9bkf6c8eaFcl2VTv
nzlvfOG8RawLbtJCL5IPN4UK9u/rkni8nVtTXWVEvWi1bhGSnUrVGSov3AG1
l2lgdmRv9eLWZg9kqN3jKHYkSbRzW8/sat1udmRpGgvT/VCYkHDVfZBOV4WE
fogrkSEaQX9TwTnd47HifebB2E0JkxZKLOGB2q3l4km/d3aLRf4lWFBUnKqo
5LrnBALWrgrBAvnoR3OKZNgjc3D93bPR/hH7Yxc8Im50te2zME4wrrQooPLK
j0Wpuq3itgf5nApALjYw84B8JkkeQap8pAT+bYdA4keemx4XDjZXHlBhGIjS
a3Ki3gvb+H0QfxhZiTzCTiNkQEIDmAJAMer7m6zYb/sODN/OuC9XuSfDPU38
RFzegmKFttmlL88iAOTKT0deN5W8G1Ks9L6tgfFCaz87Dakdj7lyuduTxp2b
lY27jrnaGCM3NCZGpJAdn/3mODhD4BOLMVCFn1933F8r4wma0UMk5JqnyQ/a
BxJ1Yey2X3jNB+iOcwDjRPqeHr8Lfb/vHoOyx9368f5satg12vXHOY30OCR3
wy1p6ZM0lfTFa09/DykYUxVyisUX1PYWF721fkx36frjvpWdBloVZVr71IN2
F7Z7ypQ6xrPrV3M4LvKyBAM2fJTjVfFeboylFcFveDhHxZ2ilXfSSETKgQBk
iOVeQZOVG9763AMqLSsoPX7QsEWKZVCXAA64S0vt7WfH1FMpURL3lZNW5CS9
79VloKk8EElMOek75kVWClRw2VC41aqr2BD6InhjE5mg4cZAXkuQokgAVTbD
ga5Bh2V0REyXO9YltVK0MidM5MHRkxGk5UVYwMHRUZyV4RG6eu0a6xv5MApX
FxlzWM7V+WoQQ3Pf3a7L4HU5butY++CTg3bVu2E5vXRZWlJg0x7iFPFhJPwB
YMxP/3rx5vwbEToJ/yl4YAnxqqwNrElyEva3r6ZqFTds+J68c9xZuzMAaiNk
9+6C/G8RLYYmXWe+K+v1UOLCxFpLJXeK1kBIhg9EY2nXebV5m8Mn7hRkw0tI
1vcYanvzrkVN2FiIYfIGWCmXzoeIyb4J5AMUR1WJRmpfkAa/0V2IMeNGIVYk
NO4xIrlWCYIcSlGFZanRRpOF9OYLdRUQoS/QJr5szPavPwvx0brSODqW4puD
0kp8T8NV6oSMnRsutGkJ86769rd9nQgSg6OKFx3EkRNwTsttibefW6aLG/gs
dwo8qtzErR+FQoIuQ3wqD6xFYL98Mex7GBDb+JghvhkZVodDsglMPtucyDNS
SERACPKyvdZMDjVoJWTA6nRnYYUcagtPIKuOviGcz4d09CeMpNYcEy756ECs
kyagFaC46/wISd9kNzhYxGvQnpcBN2QDy412mynbP9oNluyUX7jte9gTKGch
+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
AA==

-->

</rfc>

